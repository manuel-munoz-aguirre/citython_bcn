return(na)
}
numallel <- function(x) {
out <- summary(x)
na <- sum(out$allele.freq[,1]!=0)
return(na)
}
Gotland  <- STR[Breed=="Gotland",]
Hedemora <- STR[Breed=="Hedemora",]
meanallel <- function(X) {
nas <- numeric(ncol(X))
for(i in 1:ncol(X)) {
nas[i] <- numallel(X[,i])
}
m <- mean(nas)
return(m)
}
m1 <- meanallel(Gotland)
m2 <- meanallel(Hedemora)
mvec <- c(m1,m2)
mvec
numallel <- function(x) {
out <- summary(x)
#na <- sum(out$allele.freq[,1]!=0)
na <- out$nallele
return(na)
}
Gotland  <- STR[Breed=="Gotland",]
Hedemora <- STR[Breed=="Hedemora",]
meanallel <- function(X) {
nas <- numeric(ncol(X))
for(i in 1:ncol(X)) {
nas[i] <- numallel(X[,i])
}
m <- mean(nas)
return(m)
}
m1 <- meanallel(Gotland)
m2 <- meanallel(Hedemora)
mvec <- c(m1,m2)
mvec
View(STR)
length(Breed)
out
polym <- function(x) {
out <- summary(x)
#  print(out$allele.freq)
na <- sum(out$allele.freq[,1]!=0)
y <- na > 1
return(y)
}
ppolym <- function(X) {
pol <- logical(ncol(X))
for(i in 1:ncol(X)) {
pol[i] <- polym(X[,i])
}
ppol <- sum(pol)/ncol(X)
return(ppol)
}
p1 <- ppolym(Gotland)
p2 <- ppolym(Hedemora)
pvec <- c(p1,p2)
pvec
Res <- rbind(mvec,pvec)
Res
# 5. (1p) Calculamos el promedio del n?mero de alelos por microsat?lite por separado
# para las dos poblaciones. ?Cu?l ?s la poblaci?n con aparentemente menos diversidad gen?tica?
numallel <- function(x) {
out <- summary(x)
na <- sum(out$allele.freq[,1]!=0)
return(na)
}
Gotland  <- STR[Breed=="Gotland",]
Hedemora <- STR[Breed=="Hedemora",]
meanallel <- function(X) {
nas <- numeric(ncol(X))
for(i in 1:ncol(X)) {
nas[i] <- numallel(X[,i])
}
m <- mean(nas)
return(m)
}
m1 <- meanallel(Gotland)
m2 <- meanallel(Hedemora)
mvec <- c(m1,m2)
# 6. (2p) Calculamos el n?mero de microsat?lites polim?rficos dentro cada poblaci?n.
# ?Cu?l ?s la poblaci?n con aparentemente menos diversidad gen?tica?
polym <- function(x) {
out <- summary(x)
#  print(out$allele.freq)
na <- sum(out$allele.freq[,1]!=0)
y <- na > 1
return(y)
}
ppolym <- function(X) {
pol <- logical(ncol(X))
for(i in 1:ncol(X)) {
pol[i] <- polym(X[,i])
}
ppol <- sum(pol)/ncol(X)
return(ppol)
}
p1 <- ppolym(Gotland)
p2 <- ppolym(Hedemora)
pvec <- c(p1,p2)
Res <- rbind(mvec,pvec)
Res
polym <- function(x) {
out <- summary(x)
#  print(out$allele.freq)
na <- sum(out$allele.freq[,1]!=0)
y <- na > 1
return(y)
}
ppolym <- function(X) {
pol <- logical(ncol(X))
for(i in 1:ncol(X)) {
pol[i] <- polym(X[,i])
}
ppol <- sum(pol)/ncol(X)
return(ppol)
}
p1 <- ppolym(Gotland)
p2 <- ppolym(Hedemora)
pvec <- c(p1,p2)
Res <- rbind(mvec,pvec)
pvec
Res
#7 (3p) Calcula la heterocigosidad esperada para el microsat?lite MCW0248.
# Calcula tambi?n la heterocigosidad observada. Interpreta la diferencia observada entre ambos estad?sticos.
He <- summary(STR[,c("MCW0248")])$Hu
#7 (3p) Calcula la heterocigosidad esperada para el microsat?lite MCW0248.
# Calcula tambi?n la heterocigosidad observada. Interpreta la diferencia observada entre ambos estad?sticos.
He <- summary(STR[,"MCW0248"])$Hu
HE
He
summary(STR[, "MCW0248"])
summary(STR[, "MCW0248"]) %>% attributes
attributes(summary(STR[, "MCW0248"]))
gf <- summary(STR[,c("MCW0248")])$genotype.freq[,2]
gf
gf <- summary(STR[,c("MCW0248")])$genotype.freq[,2]
Ho <- sum(gf[c(-1,-5,-8,-9)])
Ho
He
# 8. (2p) Calculamos la heterocigosidad esperada para cada microsat?lite, y para cada poblaci?n.
# Hacemos un boxplot de las heterocigosidades de cada poblaci?n.
# ?Cu?l ?s la poblaci?n con aparentemente menos diversidad gen?tica?
hets <- function(X) {
He <- numeric(24)
for(i in 1:24) {
He[i] <- summary(X[,i])$Hu
}
return(He)
}
h1 <- hets(Gotland)
h2 <- hets(Hedemora)
H <- cbind(h1,h2)
H
hets <- function(X) {
He <- numeric(24)
for(i in 1:24) {
He[i] <- summary(X[,i])$Hu
}
return(He)
}
h1 <- hets(Gotland)
h2 <- hets(Hedemora)
h1
h2
H <- cbind(h1,h2)
colnames(H) <- c("Got","Hed")
H
boxplot(H)
summary(STR[,1])
summary(STR[,1])$allele.freq[,2]
shannon <- function(x) {
p <- summary(x)$allele.freq[,2]
p <- p[p!=0]
lp <- log(p)
Hp <- -1*sum(p*log(p))
return(Hp)
}
# 10. (1p) Calculamos el ?ndice de Shannon para el microsat?lite
# MCW0248, por separado para las dos poblaciones. ?C?al de las dos poblaciones parece mas diversa
# respecto a este microsat?lite?
H_got <- shannon(Gotland[,c("MCW0248")])
H_hed <- shannon(Hedemora[,c("MCW0248")])
H_got
H_ged
H_hed
Hgotvec <- numeric(nSTRs)
Hhedvec <- numeric(nSTRs)
for(i in 1:nSTRs) {
Hgotvec[i] <- shannon(Gotland[,i])
Hhedvec[i] <- shannon(Hedemora[,i])
}
Hs <- cbind(Hgotvec,Hhedvec)
colnames(Hs) <- c("Got","Hed")
boxplot(Hs)
# 12. La diversidad genot?pica ($D_G$), basado en el ?ndice de Simpson, viende dada por la f?rmula
# D_G = 1 - \frac{\sum n_i(n_i -1)}{N(N-1)}\]
# donde $n_i$ representa el n?mero de individuos con cierto genotipo, and
# y $N$ representa el tama?o de la muestra. Escribimos una funci?n para calcular $D_G$
# a partir de un vector con las cuentas genot?picas.
# Extraemos las cuentas genot?picas del microsat?lite MCW0248 de la poblaci?n
# Gotland con la funci?n 'summary', y las usamos para calcular $D_G$.
gf_got <- summary(Gotland[,c("MCW0248")])$genotype.freq[,1]
gf_got
summary(Gotland[, "MCW0248"])
summary(Gotland[, "MCW0248"])$genotype.freq
# 12. La diversidad genot?pica ($D_G$), basado en el ?ndice de Simpson, viende dada por la f?rmula
# D_G = 1 - \frac{\sum n_i(n_i -1)}{N(N-1)}\]
# donde $n_i$ representa el n?mero de individuos con cierto genotipo, and
# y $N$ representa el tama?o de la muestra. Escribimos una funci?n para calcular $D_G$
# a partir de un vector con las cuentas genot?picas.
# Extraemos las cuentas genot?picas del microsat?lite MCW0248 de la poblaci?n
# Gotland con la funci?n 'summary', y las usamos para calcular $D_G$.
gf_got <- summary(Gotland[,c("MCW0248")])$genotype.freq[,1]
gf_got <- summary(Gotland[,c("MCW0248")])$genotype.freq[,1]
gf_got
N <- sum(gf)
N
gf
rm(gf)
gf_got <- summary(Gotland[,c("MCW0248")])$genotype.freq[,1]
gf_got
N <- sum(gf_got)
N
gfminusone <- gf - 1
gfminusone <- gf_got - 1
gfminusone
gf
gf_got
simpson <- function(gf) {
N <- sum(gf)
gfminusone <- gf-1
ratio <- sum(gf*gfminusone)/(N*(N-1))
Dg <- 1- ratio
return(Dg)
}
gf_got <- summary(Gotland[,c("MCW0248")])$genotype.freq[,1]
simpson(gf_got)
gf_got
simpson(gf_got[gf_got!=0])
gf
gf_got
# 1. Instalar genetics
# install.packages(genetics)
library(genetics)
rm(list=ls())
# 2. (2p) Cargamos la base de datos en el entorno R con la instrucci?n {\tt load}.
# El fichero contiene dos objetos, la poblaci?n de procedencia ({\tt Breed}) y los datos genot?picos ({\tt STR}).
# Las columnas del objeto STR son del tipo 'genotype', empleado por el paquete 'genetics'.
# ?Cu?ntos individuos y cu?ntos microsat?lites contiene esa base de datos?
# ?Cu?ntos gallinas hay de cada poblaci?n?
load(url("http://www-eio.upc.es/~jan/data/biodiv/Chickens.rda"))
# 3. (1p) Cu?ntos alelos tiene el microsat?lite MCW0295?
# Inspeccionamos los nombres de los alelos (se pueden usar {\tt nallele} y {\tt allele.names}
# de la funci?n {\tt summary}).
out <- summary(STR[,"MCW0295"])
out
View(STR)
# 3. (1p) Cu?ntos alelos tiene el microsat?lite MCW0295?
# Inspeccionamos los nombres de los alelos (se pueden usar {\tt nallele} y {\tt allele.names}
# de la funci?n {\tt summary}).
out <- summary(STR[,"MCW0295"])
out$nallele
out
Breed
# 1. Instalar genetics
# install.packages(genetics)
library(genetics)
rm(list=ls())
# 2. (2p) Cargamos la base de datos en el entorno R con la instrucci?n {\tt load}.
# El fichero contiene dos objetos, la poblaci?n de procedencia ({\tt Breed}) y los datos genot?picos ({\tt STR}).
# Las columnas del objeto STR son del tipo 'genotype', empleado por el paquete 'genetics'.
# ?Cu?ntos individuos y cu?ntos microsat?lites contiene esa base de datos?
# ?Cu?ntos gallinas hay de cada poblaci?n?
load(url("http://www-eio.upc.es/~jan/data/biodiv/Chickens.rda"))
# Individuos :
n <- nrow(STR)
print(n)
# Microsatelites:
p <- ncol(STR)
print(p)
# 3. (1p) Cu?ntos alelos tiene el microsat?lite MCW0295?
# Inspeccionamos los nombres de los alelos (se pueden usar {\tt nallele} y {\tt allele.names}
# de la funci?n {\tt summary}).
out <- summary(STR[,"MCW0295"])
# N. alelos
print(out$nallele)
# Nombres
print(out$allele.names)
out
attributes(out)
out$allele.freq
out$allele.freq
out$allele.freq[,1]
out$allele.freq[,1] != 0
# 1. Instalar genetics
# install.packages(genetics)
library(genetics)
rm(list=ls())
# 2. (2p) Cargamos la base de datos en el entorno R con la instrucci?n {\tt load}.
# El fichero contiene dos objetos, la poblaci?n de procedencia ({\tt Breed}) y los datos genot?picos ({\tt STR}).
# Las columnas del objeto STR son del tipo 'genotype', empleado por el paquete 'genetics'.
# ?Cu?ntos individuos y cu?ntos microsat?lites contiene esa base de datos?
# ?Cu?ntos gallinas hay de cada poblaci?n?
load(url("http://www-eio.upc.es/~jan/data/biodiv/Chickens.rda"))
View(STR)
#7. (3p) Calcula la heterocigosidad esperada para el microsat?lite MCW0248.
# Calcula tambi?n la heterocigosidad observada. Interpreta la diferencia observada entre ambos estad?sticos.
He <- summary(STR[,"MCW0248"])$Hu
gf <- summary(STR[,c("MCW0248")])$genotype.freq[,2]
gf
summary(STR[, c("MCW0248")])
nSTRs <- ncol(STR)
nalleles <- numeric(nSTRs)
for(i in 1:nSTRs) {
nalleles[i] <- summary(STR[,i])$nallele
}
#barplot(table(nalleles),xlab="# alleles",ylab="# STRs")
m <- mean(nalleles)
m
# 4. (1p) Repetimos el c?lculo del n?mero de alelos para cada microsat?lite.
# ?Cu?l es el promedio del n?mero de alelos por microsat?lite?
nSTRs <- ncol(STR)
nalleles <- numeric(nSTRs)
for(i in 1:nSTRs) {
nalleles[i] <- sum(summary(STR[,i])$allele.freq[, 1] != 0)
}
#barplot(table(nalleles),xlab="# alleles",ylab="# STRs")
m <- mean(nalleles)
m
#7. (3p) Calcula la heterocigosidad esperada para el microsat?lite MCW0248.
# Calcula tambi?n la heterocigosidad observada. Interpreta la diferencia observada entre ambos estad?sticos.
He <- summary(STR[,"MCW0248"])$Hu
He
gf
summary(STR[, "MCW0248"])
He <- summary(STR[,"MCW0248"])$Hu
gf <- summary(STR[,c("MCW0248")])$genotype.freq[,2]
Ho <- sum(gf[c(-1,-5,-8,-9)])
summary(STR[, "MCW0248"])$genotypeHe
He
Ho
# 6. (2p) Calculamos el n?mero de microsat?lites polim?rficos dentro cada poblaci?n.
# ?Cu?l ?s la poblaci?n con aparentemente menos diversidad gen?tica?
polym <- function(x) {
out <- summary(x)
#  print(out$allele.freq)
na <- sum(out$allele.freq[,1]!=0)
y <- na > 1
return(y)
}
ppolym <- function(X) {
pol <- logical(ncol(X))
for(i in 1:ncol(X)) {
pol[i] <- polym(X[,i])
}
ppol <- sum(pol)/ncol(X)
return(ppol)
}
p1 <- ppolym(Gotland)
p2 <- ppolym(Hedemora)
# 1. Instalar genetics
# install.packages(genetics)
library(genetics)
rm(list=ls())
# 2. (2p) Cargamos la base de datos en el entorno R con la instrucci?n {\tt load}.
# El fichero contiene dos objetos, la poblaci?n de procedencia ({\tt Breed}) y los datos genot?picos ({\tt STR}).
# Las columnas del objeto STR son del tipo 'genotype', empleado por el paquete 'genetics'.
# ?Cu?ntos individuos y cu?ntos microsat?lites contiene esa base de datos?
# ?Cu?ntos gallinas hay de cada poblaci?n?
load(url("http://www-eio.upc.es/~jan/data/biodiv/Chickens.rda"))
# Individuos :
n <- nrow(STR)
print(n)
# Microsatelites:
p <- ncol(STR)
print(p)
# 3. (1p) Cu?ntos alelos tiene el microsat?lite MCW0295?
# Inspeccionamos los nombres de los alelos (se pueden usar {\tt nallele} y {\tt allele.names}
# de la funci?n {\tt summary}).
out <- summary(STR[,"MCW0295"])
# N. alelos
print(out$nallele)
# Nombres
print(out$allele.names)
# 4. (1p) Repetimos el c?lculo del n?mero de alelos para cada microsat?lite.
# ?Cu?l es el promedio del n?mero de alelos por microsat?lite?
nSTRs <- ncol(STR)
nalleles <- numeric(nSTRs)
for(i in 1:nSTRs) {
nalleles[i] <- sum(summary(STR[,i])$allele.freq[, 1] != 0)
}
#barplot(table(nalleles),xlab="# alleles",ylab="# STRs")
m <- mean(nalleles)
# 5. (1p) Calculamos el promedio del n?mero de alelos por microsat?lite por separado
# para las dos poblaciones. ?Cu?l ?s la poblaci?n con aparentemente menos diversidad gen?tica?
numallel <- function(x) {
out <- summary(x)
na <- sum(out$allele.freq[,1]!=0)
return(na)
}
Gotland  <- STR[Breed=="Gotland",]
Hedemora <- STR[Breed=="Hedemora",]
meanallel <- function(X) {
nas <- numeric(ncol(X))
for(i in 1:ncol(X)) {
nas[i] <- numallel(X[,i])
}
m <- mean(nas)
return(m)
}
m1 <- meanallel(Gotland)
m2 <- meanallel(Hedemora)
mvec <- c(m1,m2)
# 6. (2p) Calculamos el n?mero de microsat?lites polim?rficos dentro cada poblaci?n.
# ?Cu?l ?s la poblaci?n con aparentemente menos diversidad gen?tica?
polym <- function(x) {
out <- summary(x)
#  print(out$allele.freq)
na <- sum(out$allele.freq[,1]!=0)
y <- na > 1
return(y)
}
ppolym <- function(X) {
pol <- logical(ncol(X))
for(i in 1:ncol(X)) {
pol[i] <- polym(X[,i])
}
ppol <- sum(pol)/ncol(X)
return(ppol)
}
p1 <- ppolym(Gotland)
p2 <- ppolym(Hedemora)
pvec <- c(p1,p2)
Res <- rbind(mvec,pvec)
p1
p2
?genotype
out <- summary(STR[,1])
out
?genotype.summary
?summary.genotype
?print.summary.genotype
out
genotype.sumamry
genotype.summary
summary.genotype
polym <- function(x) {
out <- summary(x)
#  print(out$allele.freq)
na <- sum(out$allele.freq[,1]!=0)
y <- na > 1
return(y)
}
ppolym <- function(X) {
pol <- logical(ncol(X))
for(i in 1:ncol(X)) {
pol[i] <- polym(X[,i])
}
ppol <- sum(pol)/ncol(X)
return(ppol)
}
p1 <- ppolym(Gotland)
p2 <- ppolym(Hedemora)
p1
p2
out
out$genotype.freq
install.packages("ggplot")
install.packages("ggplot2")
install.packages("ggmap")
install.packages("Rtsne")
setwd("~/Desktop/citython")
X <- read.delim("TRANSPORTS.csv")
X <- read.delim("TRANSPORTS.csv")
View(X)
X <- read.csv("TRANSPORTS.csv")
View(X)
table(X$CAPA_GENERICA)
table(X$NOM_CAPA)
X$CODI_CAPA <- NULL
X$CAPA_GENERICA <- NULL
View(X)
X[, 2:5] <- NULL
View(X)
X$DISTRICTE <- NULL
X$BARRI <- NULL
View(X)
X$ADRECA <- NULL
X$TELEFON <- NULL
View(X)
X$NOM_DISTRICTE <- NULL
X$NOM_BARRI <- NULL
View(X)
?write.csv
write.csv(X, file = "transportes_con_nombre_de_metro.csv", row.names = FALSE)
a <- read.delim("transportes_con_nombre_de_metro.csv")
a <- read.csv("transportes_con_nombre_de_metro.csv")
rm(a)
write.csv(X[,1:3], file = "transportes_sin_nombre_de_servicio.csv", row.names=FALSE)
setwd("~/Desktop/citython/citython_bcn/Data_mining/yelp_api")
X <- read.delim("restaurants.csv")
X <- read.csv("restaurants.csv")
View(X)
sum(complete.cases(X))
X <- X[complete.cases(X), ]
write.csv(X, file = "restaurants_nomissings.csv", row.names = FALSE)
